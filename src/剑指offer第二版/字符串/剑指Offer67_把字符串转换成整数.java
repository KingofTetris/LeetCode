package 剑指offer第二版.字符串;

/**
 * @Author KingofTetris
 * @Date 2022/9/19 14:44
 * 写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。
 *
 *  
 *
 * 首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。
 *
 * 当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。
 *
 * 该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。
 *
 * 注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。
 *
 * 在任何情况下，若函数不能进行有效的转换时，请返回 0。
 *
 * 说明：
 *
 * 假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
 *
 * 示例 1:
 *
 * 输入: "42"
 * 输出: 42
 * 示例 2:
 *
 * 输入: "   -42"
 * 输出: -42
 * 解释: 第一个非空白字符为 '-', 它是一个负号。
 *      我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
 * 示例 3:
 *
 * 输入: "4193 with words"
 * 输出: 4193
 * 解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
 * 示例 4:
 *
 * 输入: "words and 987"
 * 输出: 0
 * 解释: 第一个非空字符是 'w', 但它不是数字或正、负号。
 *      因此无法执行有效的转换。
 * 示例 5:
 *
 * 输入: "-91283472332"
 * 输出: -2147483648
 * 解释: 数字 "-91283472332" 超过 32 位有符号整数范围。
 *      因此返回 INT_MIN (−231) 。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode.cn/problems/ba-zi-fu-chuan-zhuan-huan-cheng-zheng-shu-lcof
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 */
public class 剑指Offer67_把字符串转换成整数 {

    public int strToInt(String str) {
        char[] c = str.trim().toCharArray();//先去掉首尾空格
        if(c.length == 0) return 0;
        int res = 0, bndry = Integer.MAX_VALUE / 10; //boundary 如果res 大于这个值 就不要再乘10了。返回Integer的极限
        //还有一种情况是res刚好等于这个boundary,那么你就要判断后面的数字是否 > '7' 。2147483647
        int i = 1, sign = 1;//i为1，默认有字符'+'
        if(c[0] == '-') sign = -1; //负号的标记
        else if(c[0] != '+') i = 0; //如果没有'+' i = 0
        for(int j = i; j < c.length; j++) {
            if(c[j] < '0' || c[j] > '9') break;//不是数字就可以跳出了

            //其实下面这个条件是隐含了对Integer.MIN_VALUE -2147483648 的判断的
            //如果c[j] >= '8' 那他要么刚好是MIN_VALUE 要么越界，也是MIN_VALUE
            if(res > bndry || res == bndry && c[j] > '7') return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            res = res * 10 + (c[j] - '0'); //这个计算字符为数字的方法 好好看
            //res * 10 + (c[j] - '0') 每次往后移动相当于原来的数字乘以10，再加上新的个位数
        }
        return sign * res;
    }

}
