//外层循环扩展右边界，内层循环扩展左边界
for (int l = 0, r = 0 ; r < n ; r++) {
	//当前考虑的元素
	while (l <= r && check()) {//区间[left,right]不符合题意
        //扩展左边界
    }
    //区间[left,right]符合题意，统计相关信息
}

//找最长子数组就是滑动窗口的经典模板题
public static int findSubArray(int[] nums) {
        int N = nums.length; // 数组长度
        int left = 0, right = 0; // 双指针，表示当前遍历的区间[left, right]，闭区间
        int sums = 0; // 用于统计子数组/子区间是否有效，根据题目可能会改成求和/计数
        int res = 0; // 保存最大满足题目要求的子数组/子串长度
        while (right < N) { // 当右边的指针没有搜索到数组结尾
            sums += nums[right]; // 增加当前右边指针的数字的求和/计数
            while (区间不符合题意) { // 此时需要一直移动左指针，直至找到一个符合题意的区间
                sums -= nums[left]; // 移动左指针前需要从sums中减去left位置的数字
                left++; // 真正移动左指针
                // 到 while 结束时，找到一个符合题意要求的子数组/子串
            }
            res = Math.max(res, right - left + 1); // 更新结果
            right++; // 移动右指针，去探索新的区间
        }
        return res;
    }
